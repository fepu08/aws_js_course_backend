service: product-service
frameworkVersion: '3'

useDotenv: true

provider:
  name: aws
  runtime: nodejs18.x
  region: ${env:REGION}
  httpApi:
    cors: true
  iam:
    role:
      statements:
        - Effect: Allow
          Action:
            - dynamodb:DescribeTable
            - dynamodb:Query
            - dynamodb:Scan
            - dynamodb:GetItem
            - dynamodb:PutItem
            - dynamodb:UpdateItem
            - dynamodb:DeleteItem
            - dynamodb:BatchGetItem
            - dynamodb:BatchWriteItem
          Resource: 'arn:aws:dynamodb:${self:provider.region}:*:*'
  environment:
    ProductsTable: ${env:PRODUCTS_TABLE}
    StocksTable: ${env:STOCKS_TABLE}

plugins:
  - serverless-auto-swagger
  - serverless-webpack
  - serverless-offline
  - serverless-dotenv-plugin

custom:
  webpack:
    webpackConfig: 'webpack.config.js'
    packager: 'npm'
    includeModules: true
  autoswagger:
    typefiles: ['./models/product.types.swagger.ts', './models/api.types.ts']

functions:
  getProducts:
    handler: functions/index.getProducts
    events:
      - httpApi:
          path: /products
          method: get
          responseData:
            200:
              description: Successful response
              bodyType: ProductList
            500:
              description: Something went wrong
              bodyType: ErrorResponse
  getProductById:
    handler: functions/index.getProductById
    events:
      - httpApi:
          path: /products/{productId}
          method: get
          responseData:
            200:
              description: Successful response
              bodyType: Product
            404:
              description: Product not found
              bodyType: ErrorResponse
            500:
              description: Something went wrong
              bodyType: ErrorResponse
  createProduct:
    handler: functions/index.createProduct
    events:
      - httpApi:
          path: /products
          method: post
          bodyType: CreateProduct
          responseData:
            200:
              description: Successful response
              bodyType: Product
            400:
              description: Product data is invalid
              bodyType: ErrorResponse
            500:
              description: Something went wrong
              bodyType: ErrorResponse
